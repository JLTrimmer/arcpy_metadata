from __future__ import print_function

__author__ = 'nickrsan'

import datetime
import unittest
import os
import shutil

import arcpy_metadata as md

temp_data_folder = os.path.join(os.path.dirname(__file__), "test_data_temp_folder")
test_data_folder = os.path.join(os.path.dirname(__file__), "test_data")


def clean_data():
	global test_data_folder
	print("Cleaning test data folder")
	if os.path.exists(temp_data_folder):  # remove the old copy of the test data
		shutil.rmtree(temp_data_folder)
	shutil.copytree(test_data_folder, temp_data_folder)  # copy the directory tree so that we can get a clean copy of the data to work with and preserve the test data as clean
	test_data_folder = temp_data_folder  # set the data folder to the temp folder now


class TestExampleCode(unittest.TestCase):
	"""
		To start with, let's just get a simple test in that tests the code from the perspective of how someone might use it.
		We'll do that by running the example code, which should certainly run.
	"""

	def run_example(self, feature_class):

		metadata = md.MetadataEditor(feature_class)  # also has a feature_layer parameter if you're working with one, but edits get saved back to the source feature class
		metadata.title.set("The metadata title!")

		generated_time = "This layer was generated on {0:s}".format(datetime.datetime.now().strftime("%m/%d/%Y %I:%M %p"))

		metadata.purpose.set("Layer represents locations of the rare Snipe.")

		metadata.abstract.append("generated by ___ software")
		metadata.abstract.append(generated_time)  # .prepend also exists
		metadata.tags.add(["foo", "bar", "baz"])  # tags.extend is equivalent to maintain list semantics

		metadata.finish()  # save the metadata back to the original source feature class and cleanup. Without calling finish(), your edits are NOT saved!

		# TODO: for now, no assertions, we just want the code to run start to finish and we can manually check. Later, we'll make code that actually attempts to read the data back and confirms it's there

	def test_example(self):
		clean_data()
		self.run_example(os.path.join(test_data_folder, "simple_poly_w_base_metadata.shp"))
		self.run_example(os.path.join(test_data_folder, "simple_poly_no_metadata.shp"))
